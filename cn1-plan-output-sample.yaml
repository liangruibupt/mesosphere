[ec2-user@ip-10-0-0-33 mesoswphere]$ terraform plan -out=plan.out
Refreshing Terraform state in-memory prior to plan...
The refreshed state will be used to calculate this plan, but will not be
persisted to local or remote state storage.

data.template_file.os-setup: Refreshing state...
data.template_file.aws_ami_user: Refreshing state...
data.template_file.aws_ami_user: Refreshing state...
data.template_file.aws_ami_user: Refreshing state...
data.template_file.os-setup: Refreshing state...
data.template_file.os-setup: Refreshing state...
data.template_file.os-setup: Refreshing state...
data.template_file.aws_ami_user: Refreshing state...
data.http.whatismyip: Refreshing state...
data.aws_availability_zones.available: Refreshing state...
data.aws_region.current: Refreshing state...
data.aws_region.current: Refreshing state...
data.aws_region.current: Refreshing state...
data.aws_region.current: Refreshing state...
data.aws_availability_zones.available: Refreshing state...
data.template_file.aws_ami: Refreshing state...
data.template_file.aws_ami: Refreshing state...
data.template_file.aws_ami: Refreshing state...
data.template_file.aws_ami: Refreshing state...

------------------------------------------------------------------------

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  + create
 <= read (data resources)

Terraform will perform the following actions:

  + module.dcos.random_id.id
      id:                                        <computed>
      b64:                                       <computed>
      b64_std:                                   <computed>
      b64_url:                                   <computed>
      byte_length:                               "2"
      dec:                                       <computed>
      hex:                                       <computed>
      prefix:                                    "my-open-dcos"

  + module.dcos.module.dcos-infrastructure.aws_key_pair.deployer
      id:                                        <computed>
      fingerprint:                               <computed>
      key_name:                                  "${var.cluster_name}-deployer-key"
      public_key:                                "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDPa1AAv6gK3zbhZZopeMReFtSfOAY/qBPE/COAI8ZaIb6efGNHS+YCR0FcBzSQlM7Rr9DeL+sfa7bc651K3r13S6RSpjTPY7AIqqhwxcxhNRG9+j+wJKzZ7Cio8oyeuFJoEjz0v34RVEC8olkTDvs5d13X3F7CEgkJn+xNE9vrY/8hSV3qbMRxZr4mpX4j+tCZO+YM0cJLyohp0g9a9BI+LDX5Eg+dprV6IgsKTTy7pInpVZrbBuOzpyfLLLl7mUsVlCjESEeDrYtH4+eNht68jn4tNIiTUim/BV42774JExl67v11MUTx9sagRA0ziPrBWPbLUCOPX5ajvgkebgBD ec2-user@ip-10-0-0-33.cn-northwest-1.compute.internal"

  + module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_instance_profile.agent_profile
      id:                                        <computed>
      arn:                                       <computed>
      create_date:                               <computed>
      name:                                      "dcos-${var.cluster_name}-instance_profile"
      path:                                      "/"
      role:                                      "${aws_iam_role.agent_role.name}"
      roles.#:                                   <computed>
      unique_id:                                 <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_instance_profile.master_profile
      id:                                        <computed>
      arn:                                       <computed>
      create_date:                               <computed>
      name:                                      "dcos-${var.cluster_name}-master_instance_profile"
      path:                                      "/"
      role:                                      "${aws_iam_role.master_role.name}"
      roles.#:                                   <computed>
      unique_id:                                 <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_role.agent_role
      id:                                        <computed>
      arn:                                       <computed>
      assume_role_policy:                        "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n"
      create_date:                               <computed>
      force_detach_policies:                     "false"
      max_session_duration:                      "3600"
      name:                                      "dcos-${var.cluster_name}-instance_role"
      path:                                      "/"
      unique_id:                                 <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_role.master_role
      id:                                        <computed>
      arn:                                       <computed>
      assume_role_policy:                        "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"ec2.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\n"
      create_date:                               <computed>
      force_detach_policies:                     "false"
      max_session_duration:                      "3600"
      name:                                      "dcos-${var.cluster_name}-master_instance_role"
      path:                                      "/"
      unique_id:                                 <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_role_policy.agent_policy
      id:                                        <computed>
      name:                                      "dcos-${var.cluster_name}-instance_policy"
      policy:                                    "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"RexRay\",\n            \"Action\": [\n                \"ec2:CreateTags\",\n                \"ec2:DescribeInstances\",\n                \"ec2:CreateVolume\",\n                \"ec2:DeleteVolume\",\n                \"ec2:AttachVolume\",\n                \"ec2:DetachVolume\",\n                \"ec2:DescribeVolumes\",\n                \"ec2:DescribeVolumeStatus\",\n                \"ec2:DescribeVolumeAttribute\",\n                \"ec2:CreateSnapshot\",\n                \"ec2:CopySnapshot\",\n                \"ec2:DeleteSnapshot\",\n                \"ec2:DescribeSnapshots\",\n                \"ec2:DescribeSnapshotAttribute\"\n            ],\n            \"Resource\": \"*\",\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"KubernetesCloudProvider\",\n            \"Action\": [\n              \"ec2:CreateTags\",\n              \"ec2:DescribeInstances\",\n              \"ec2:CreateVolume\",\n              \"ec2:DeleteVolume\",\n              \"ec2:AttachVolume\",\n              \"ec2:DetachVolume\",\n              \"ec2:DescribeVolumes\",\n              \"ec2:DescribeVolumeStatus\",\n              \"ec2:DescribeVolumeAttribute\",\n              \"ec2:CreateSnapshot\",\n              \"ec2:CopySnapshot\",\n              \"ec2:DeleteSnapshot\",\n              \"ec2:DescribeSnapshots\",\n              \"ec2:DescribeSnapshotAttribute\",\n              \"ec2:AuthorizeSecurityGroupIngress\",\n              \"ec2:CreateRoute\",\n              \"ec2:CreateSecurityGroup\",\n              \"ec2:DeleteSecurityGroup\",\n              \"ec2:DeleteRoute\",\n              \"ec2:DescribeRouteTables\",\n              \"ec2:DescribeSubnets\",\n              \"ec2:DescribeSecurityGroups\",\n              \"ec2:ModifyInstanceAttribute\",\n              \"ec2:RevokeSecurityGroupIngress\",\n              \"elasticloadbalancing:AttachLoadBalancerToSubnets\",\n              \"elasticloadbalancing:ApplySecurityGroupsToLoadBalancer\",\n              \"elasticloadbalancing:CreateLoadBalancer\",\n              \"elasticloadbalancing:CreateLoadBalancerPolicy\",\n              \"elasticloadbalancing:CreateLoadBalancerListeners\",\n              \"elasticloadbalancing:ConfigureHealthCheck\",\n              \"elasticloadbalancing:DeleteLoadBalancer\",\n              \"elasticloadbalancing:DeleteLoadBalancerListeners\",\n              \"elasticloadbalancing:DescribeLoadBalancers\",\n              \"elasticloadbalancing:DescribeLoadBalancerAttributes\",\n              \"elasticloadbalancing:DetachLoadBalancerFromSubnets\",\n              \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\",\n              \"elasticloadbalancing:ModifyLoadBalancerAttributes\",\n              \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\",\n              \"elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer\"\n            ],\n            \"Resource\": \"*\",\n            \"Effect\": \"Allow\"\n        },\n        {\n            \"Sid\": \"SoakClusterLogsArchiveBucketLevel\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:ListBucket\"\n            ],\n            \"Resource\": \"arn:aws:s3:::soak-cluster-logs\"\n        },\n        {\n            \"Sid\": \"SoakClusterLogsArchiveObjectLevel\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::soak-cluster-logs/*\"\n        },\n        {\n          \"Sid\": \"ElasticIndexSnapshot\",\n          \"Action\": [\n            \"s3:ListBucket\",\n            \"s3:GetBucketLocation\",\n            \"s3:ListBucketMultipartUploads\",\n            \"s3:ListBucketVersions\"\n          ],\n          \"Condition\": {\n            \"StringLike\": {\n              \"s3:cluster_name\": [\n                \"${var.cluster_name}/*\"\n              ]\n            }\n          },\n          \"Effect\": \"Allow\",\n          \"Resource\": [\n            \"arn:aws:s3:::soak-cluster-elk-snapshots\"\n          ]\n        }\n    ]\n}\n"
      role:                                      "${aws_iam_role.agent_role.id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-iam.aws_iam_role_policy.master_policy
      id:                                        <computed>
      name:                                      "dcos-${var.cluster_name}-master_instance_policy"
      policy:                                    "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n          \"Sid\": \"SoakClusterLogsArchiveBucketLevel\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"s3:ListBucket\"\n          ],\n          \"Resource\": \"arn:aws:s3:::soak-cluster-logs\"\n      },\n      {\n          \"Sid\": \"SoakClusterLogsArchiveObjectLevel\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"s3:PutObject\"\n          ],\n          \"Resource\": \"arn:aws:s3:::soak-cluster-logs/*\"\n      },\n      {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"es:*\"\n          ],\n          \"Resource\": \"arn:aws:es:us-east-1:159577368695:domain/scaletestlogsinkpublic/*\"\n      }\n    ]\n}\n"
      role:                                      "${aws_iam_role.master_role.id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-security-groups.aws_security_group.admin
      id:                                        <computed>
      arn:                                       <computed>
      description:                               "Allow incoming traffic from admin_ips"
      egress.#:                                  <computed>
      ingress.#:                                 "5"
      ingress.2867485794.cidr_blocks.#:          "1"
      ingress.2867485794.cidr_blocks.0:          "52.82.23.159/32"
      ingress.2867485794.description:            ""
      ingress.2867485794.from_port:              "9090"
      ingress.2867485794.ipv6_cidr_blocks.#:     "0"
      ingress.2867485794.prefix_list_ids.#:      "0"
      ingress.2867485794.protocol:               "tcp"
      ingress.2867485794.security_groups.#:      "0"
      ingress.2867485794.self:                   "false"
      ingress.2867485794.to_port:                "9090"
      ingress.2990633242.cidr_blocks.#:          "1"
      ingress.2990633242.cidr_blocks.0:          "52.82.23.159/32"
      ingress.2990633242.description:            ""
      ingress.2990633242.from_port:              "8181"
      ingress.2990633242.ipv6_cidr_blocks.#:     "0"
      ingress.2990633242.prefix_list_ids.#:      "0"
      ingress.2990633242.protocol:               "tcp"
      ingress.2990633242.security_groups.#:      "0"
      ingress.2990633242.self:                   "false"
      ingress.2990633242.to_port:                "8181"
      ingress.310513491.cidr_blocks.#:           "1"
      ingress.310513491.cidr_blocks.0:           "52.82.23.159/32"
      ingress.310513491.description:             ""
      ingress.310513491.from_port:               "80"
      ingress.310513491.ipv6_cidr_blocks.#:      "0"
      ingress.310513491.prefix_list_ids.#:       "0"
      ingress.310513491.protocol:                "tcp"
      ingress.310513491.security_groups.#:       "0"
      ingress.310513491.self:                    "false"
      ingress.310513491.to_port:                 "80"
      ingress.3206834784.cidr_blocks.#:          "1"
      ingress.3206834784.cidr_blocks.0:          "52.82.23.159/32"
      ingress.3206834784.description:            ""
      ingress.3206834784.from_port:              "22"
      ingress.3206834784.ipv6_cidr_blocks.#:     "0"
      ingress.3206834784.prefix_list_ids.#:      "0"
      ingress.3206834784.protocol:               "tcp"
      ingress.3206834784.security_groups.#:      "0"
      ingress.3206834784.self:                   "false"
      ingress.3206834784.to_port:                "22"
      ingress.3580412939.cidr_blocks.#:          "1"
      ingress.3580412939.cidr_blocks.0:          "52.82.23.159/32"
      ingress.3580412939.description:            ""
      ingress.3580412939.from_port:              "443"
      ingress.3580412939.ipv6_cidr_blocks.#:     "0"
      ingress.3580412939.prefix_list_ids.#:      "0"
      ingress.3580412939.protocol:               "tcp"
      ingress.3580412939.security_groups.#:      "0"
      ingress.3580412939.self:                   "false"
      ingress.3580412939.to_port:                "443"
      name:                                      "dcos-${var.cluster_name}-admin-firewall"
      owner_id:                                  <computed>
      revoke_rules_on_delete:                    "false"
      tags.%:                                    <computed>
      vpc_id:                                    "${var.vpc_id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-security-groups.aws_security_group.internal
      id:                                        <computed>
      arn:                                       <computed>
      description:                               "Allow all internal traffic"
      egress.#:                                  "1"
      egress.482069346.cidr_blocks.#:            "1"
      egress.482069346.cidr_blocks.0:            "0.0.0.0/0"
      egress.482069346.description:              ""
      egress.482069346.from_port:                "0"
      egress.482069346.ipv6_cidr_blocks.#:       "0"
      egress.482069346.prefix_list_ids.#:        "0"
      egress.482069346.protocol:                 "-1"
      egress.482069346.security_groups.#:        "0"
      egress.482069346.self:                     "false"
      egress.482069346.to_port:                  "0"
      ingress.#:                                 "1"
      ingress.2432809376.cidr_blocks.#:          "1"
      ingress.2432809376.cidr_blocks.0:          "172.12.0.0/16"
      ingress.2432809376.description:            ""
      ingress.2432809376.from_port:              "0"
      ingress.2432809376.ipv6_cidr_blocks.#:     "0"
      ingress.2432809376.prefix_list_ids.#:      "0"
      ingress.2432809376.protocol:               "-1"
      ingress.2432809376.security_groups.#:      "0"
      ingress.2432809376.self:                   "false"
      ingress.2432809376.to_port:                "0"
      name:                                      "dcos-${var.cluster_name}-internal-firewall"
      owner_id:                                  <computed>
      revoke_rules_on_delete:                    "false"
      tags.%:                                    <computed>
      vpc_id:                                    "${var.vpc_id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-security-groups.aws_security_group.master_lb
      id:                                        <computed>
      arn:                                       <computed>
      description:                               "Allow incoming traffic on masters load balancer"
      egress.#:                                  <computed>
      ingress.#:                                 "2"
      ingress.310513491.cidr_blocks.#:           "1"
      ingress.310513491.cidr_blocks.0:           "52.82.23.159/32"
      ingress.310513491.description:             ""
      ingress.310513491.from_port:               "80"
      ingress.310513491.ipv6_cidr_blocks.#:      "0"
      ingress.310513491.prefix_list_ids.#:       "0"
      ingress.310513491.protocol:                "tcp"
      ingress.310513491.security_groups.#:       "0"
      ingress.310513491.self:                    "false"
      ingress.310513491.to_port:                 "80"
      ingress.3580412939.cidr_blocks.#:          "1"
      ingress.3580412939.cidr_blocks.0:          "52.82.23.159/32"
      ingress.3580412939.description:            ""
      ingress.3580412939.from_port:              "443"
      ingress.3580412939.ipv6_cidr_blocks.#:     "0"
      ingress.3580412939.prefix_list_ids.#:      "0"
      ingress.3580412939.protocol:               "tcp"
      ingress.3580412939.security_groups.#:      "0"
      ingress.3580412939.self:                   "false"
      ingress.3580412939.to_port:                "443"
      name:                                      "dcos-${var.cluster_name}-master-lb-firewall"
      owner_id:                                  <computed>
      revoke_rules_on_delete:                    "false"
      tags.%:                                    <computed>
      vpc_id:                                    "${var.vpc_id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-security-groups.aws_security_group.public_agents
      id:                                        <computed>
      arn:                                       <computed>
      description:                               "Allow incoming traffic on Public Agents load balancer"
      egress.#:                                  <computed>
      ingress.#:                                 <computed>
      name:                                      "dcos-${var.cluster_name}-public-agents-lb-firewall"
      owner_id:                                  <computed>
      revoke_rules_on_delete:                    "false"
      tags.%:                                    <computed>
      vpc_id:                                    "${var.vpc_id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-security-groups.aws_security_group_rule.additional_rules[0]
      id:                                        <computed>
      cidr_blocks.#:                             "1"
      cidr_blocks.0:                             "0.0.0.0/0"
      from_port:                                 "80"
      protocol:                                  "tcp"
      security_group_id:                         "${aws_security_group.public_agents.id}"
      self:                                      "false"
      source_security_group_id:                  <computed>
      to_port:                                   "80"
      type:                                      "ingress"

  + module.dcos.module.dcos-infrastructure.module.dcos-security-groups.aws_security_group_rule.additional_rules[1]
      id:                                        <computed>
      cidr_blocks.#:                             "1"
      cidr_blocks.0:                             "0.0.0.0/0"
      from_port:                                 "443"
      protocol:                                  "tcp"
      security_group_id:                         "${aws_security_group.public_agents.id}"
      self:                                      "false"
      source_security_group_id:                  <computed>
      to_port:                                   "443"
      type:                                      "ingress"

  + module.dcos.module.dcos-infrastructure.module.dcos-vpc.aws_internet_gateway.default
      id:                                        <computed>
      owner_id:                                  <computed>
      tags.%:                                    <computed>
      vpc_id:                                    "${aws_vpc.dcos_vpc.id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-vpc.aws_route.internet_access
      id:                                        <computed>
      destination_cidr_block:                    "0.0.0.0/0"
      destination_prefix_list_id:                <computed>
      egress_only_gateway_id:                    <computed>
      gateway_id:                                "${aws_internet_gateway.default.id}"
      instance_id:                               <computed>
      instance_owner_id:                         <computed>
      nat_gateway_id:                            <computed>
      network_interface_id:                      <computed>
      origin:                                    <computed>
      route_table_id:                            "${aws_vpc.dcos_vpc.main_route_table_id}"
      state:                                     <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-vpc.aws_subnet.dcos_subnet[0]
      id:                                        <computed>
      arn:                                       <computed>
      assign_ipv6_address_on_creation:           "false"
      availability_zone:                         "cn-northwest-1a"
      availability_zone_id:                      <computed>
      cidr_block:                                "172.12.0.0/20"
      ipv6_cidr_block:                           <computed>
      ipv6_cidr_block_association_id:            <computed>
      map_public_ip_on_launch:                   "true"
      owner_id:                                  <computed>
      tags.%:                                    <computed>
      vpc_id:                                    "${aws_vpc.dcos_vpc.id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-vpc.aws_subnet.dcos_subnet[1]
      id:                                        <computed>
      arn:                                       <computed>
      assign_ipv6_address_on_creation:           "false"
      availability_zone:                         "cn-northwest-1b"
      availability_zone_id:                      <computed>
      cidr_block:                                "172.12.16.0/20"
      ipv6_cidr_block:                           <computed>
      ipv6_cidr_block_association_id:            <computed>
      map_public_ip_on_launch:                   "true"
      owner_id:                                  <computed>
      tags.%:                                    <computed>
      vpc_id:                                    "${aws_vpc.dcos_vpc.id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-vpc.aws_subnet.dcos_subnet[2]
      id:                                        <computed>
      arn:                                       <computed>
      assign_ipv6_address_on_creation:           "false"
      availability_zone:                         "cn-northwest-1c"
      availability_zone_id:                      <computed>
      cidr_block:                                "172.12.32.0/20"
      ipv6_cidr_block:                           <computed>
      ipv6_cidr_block_association_id:            <computed>
      map_public_ip_on_launch:                   "true"
      owner_id:                                  <computed>
      tags.%:                                    <computed>
      vpc_id:                                    "${aws_vpc.dcos_vpc.id}"

  + module.dcos.module.dcos-infrastructure.module.dcos-vpc.aws_vpc.dcos_vpc
      id:                                        <computed>
      arn:                                       <computed>
      assign_generated_ipv6_cidr_block:          "false"
      cidr_block:                                "172.12.0.0/16"
      default_network_acl_id:                    <computed>
      default_route_table_id:                    <computed>
      default_security_group_id:                 <computed>
      dhcp_options_id:                           <computed>
      enable_classiclink:                        <computed>
      enable_classiclink_dns_support:            <computed>
      enable_dns_hostnames:                      "true"
      enable_dns_support:                        "true"
      instance_tenancy:                          "default"
      ipv6_association_id:                       <computed>
      ipv6_cidr_block:                           <computed>
      main_route_table_id:                       <computed>
      owner_id:                                  <computed>
      tags.%:                                    <computed>

  + module.dcos.module.dcos-install.module.dcos-bootstrap-install.null_resource.bootstrap
      id:                                        <computed>
      triggers.%:                                <computed>

  + module.dcos.module.dcos-install.module.dcos-masters-install.null_resource.master1
      id:                                        <computed>
      triggers.%:                                <computed>

  + module.dcos.module.dcos-install.module.dcos-private-agents-install.null_resource.private-agents[0]
      id:                                        <computed>
      triggers.%:                                <computed>

  + module.dcos.module.dcos-install.module.dcos-private-agents-install.null_resource.private-agents[1]
      id:                                        <computed>
      triggers.%:                                <computed>

  + module.dcos.module.dcos-install.module.dcos-public-agents-install.null_resource.public-agents
      id:                                        <computed>
      triggers.%:                                <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-bootstrap-instance.module.dcos-bootstrap-instance.aws_instance.instance
      id:                                        <computed>
      ami:                                       "ami-00435c26c02508dc7"
      arn:                                       <computed>
      associate_public_ip_address:               "true"
      availability_zone:                         <computed>
      cpu_core_count:                            <computed>
      cpu_threads_per_core:                      <computed>
      ebs_block_device.#:                        <computed>
      ephemeral_block_device.#:                  <computed>
      get_password_data:                         "false"
      instance_state:                            <computed>
      instance_type:                             "t2.medium"
      ipv6_address_count:                        <computed>
      ipv6_addresses.#:                          <computed>
      key_name:                                  "${var.key_name}"
      network_interface.#:                       <computed>
      network_interface_id:                      <computed>
      password_data:                             <computed>
      placement_group:                           <computed>
      primary_network_interface_id:              <computed>
      private_dns:                               <computed>
      private_ip:                                <computed>
      public_dns:                                <computed>
      public_ip:                                 <computed>
      root_block_device.#:                       "1"
      root_block_device.0.delete_on_termination: "true"
      root_block_device.0.volume_id:             <computed>
      root_block_device.0.volume_size:           "80"
      root_block_device.0.volume_type:           "standard"
      security_groups.#:                         <computed>
      source_dest_check:                         "true"
      subnet_id:                                 "${element(var.subnet_ids, count.index % length(var.subnet_ids))}"
      tags.%:                                    <computed>
      tenancy:                                   <computed>
      volume_tags.%:                             <computed>
      vpc_security_group_ids.#:                  <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-bootstrap-instance.module.dcos-bootstrap-instance.null_resource.instance-prereq
      id:                                        <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-master-instances.module.dcos-master-instances.aws_instance.instance
      id:                                        <computed>
      ami:                                       "ami-00435c26c02508dc7"
      arn:                                       <computed>
      associate_public_ip_address:               "true"
      availability_zone:                         <computed>
      cpu_core_count:                            <computed>
      cpu_threads_per_core:                      <computed>
      ebs_block_device.#:                        <computed>
      ephemeral_block_device.#:                  <computed>
      get_password_data:                         "false"
      iam_instance_profile:                      "${var.iam_instance_profile}"
      instance_state:                            <computed>
      instance_type:                             "m4.xlarge"
      ipv6_address_count:                        <computed>
      ipv6_addresses.#:                          <computed>
      key_name:                                  "${var.key_name}"
      network_interface.#:                       <computed>
      network_interface_id:                      <computed>
      password_data:                             <computed>
      placement_group:                           <computed>
      primary_network_interface_id:              <computed>
      private_dns:                               <computed>
      private_ip:                                <computed>
      public_dns:                                <computed>
      public_ip:                                 <computed>
      root_block_device.#:                       "1"
      root_block_device.0.delete_on_termination: "true"
      root_block_device.0.volume_id:             <computed>
      root_block_device.0.volume_size:           "120"
      root_block_device.0.volume_type:           "gp2"
      security_groups.#:                         <computed>
      source_dest_check:                         "true"
      subnet_id:                                 "${element(var.subnet_ids, count.index % length(var.subnet_ids))}"
      tags.%:                                    <computed>
      tenancy:                                   <computed>
      volume_tags.%:                             <computed>
      vpc_security_group_ids.#:                  <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-master-instances.module.dcos-master-instances.null_resource.instance-prereq
      id:                                        <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-privateagent-instances.module.dcos-private-agent-instances.aws_instance.instance[0]
      id:                                        <computed>
      ami:                                       "ami-00435c26c02508dc7"
      arn:                                       <computed>
      associate_public_ip_address:               "true"
      availability_zone:                         <computed>
      cpu_core_count:                            <computed>
      cpu_threads_per_core:                      <computed>
      ebs_block_device.#:                        <computed>
      ephemeral_block_device.#:                  <computed>
      get_password_data:                         "false"
      iam_instance_profile:                      "${var.iam_instance_profile}"
      instance_state:                            <computed>
      instance_type:                             "m4.xlarge"
      ipv6_address_count:                        <computed>
      ipv6_addresses.#:                          <computed>
      key_name:                                  "${var.key_name}"
      network_interface.#:                       <computed>
      network_interface_id:                      <computed>
      password_data:                             <computed>
      placement_group:                           <computed>
      primary_network_interface_id:              <computed>
      private_dns:                               <computed>
      private_ip:                                <computed>
      public_dns:                                <computed>
      public_ip:                                 <computed>
      root_block_device.#:                       "1"
      root_block_device.0.delete_on_termination: "true"
      root_block_device.0.volume_id:             <computed>
      root_block_device.0.volume_size:           "120"
      root_block_device.0.volume_type:           "gp2"
      security_groups.#:                         <computed>
      source_dest_check:                         "true"
      subnet_id:                                 "${element(var.subnet_ids, count.index % length(var.subnet_ids))}"
      tags.%:                                    <computed>
      tenancy:                                   <computed>
      volume_tags.%:                             <computed>
      vpc_security_group_ids.#:                  <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-privateagent-instances.module.dcos-private-agent-instances.aws_instance.instance[1]
      id:                                        <computed>
      ami:                                       "ami-00435c26c02508dc7"
      arn:                                       <computed>
      associate_public_ip_address:               "true"
      availability_zone:                         <computed>
      cpu_core_count:                            <computed>
      cpu_threads_per_core:                      <computed>
      ebs_block_device.#:                        <computed>
      ephemeral_block_device.#:                  <computed>
      get_password_data:                         "false"
      iam_instance_profile:                      "${var.iam_instance_profile}"
      instance_state:                            <computed>
      instance_type:                             "m4.xlarge"
      ipv6_address_count:                        <computed>
      ipv6_addresses.#:                          <computed>
      key_name:                                  "${var.key_name}"
      network_interface.#:                       <computed>
      network_interface_id:                      <computed>
      password_data:                             <computed>
      placement_group:                           <computed>
      primary_network_interface_id:              <computed>
      private_dns:                               <computed>
      private_ip:                                <computed>
      public_dns:                                <computed>
      public_ip:                                 <computed>
      root_block_device.#:                       "1"
      root_block_device.0.delete_on_termination: "true"
      root_block_device.0.volume_id:             <computed>
      root_block_device.0.volume_size:           "120"
      root_block_device.0.volume_type:           "gp2"
      security_groups.#:                         <computed>
      source_dest_check:                         "true"
      subnet_id:                                 "${element(var.subnet_ids, count.index % length(var.subnet_ids))}"
      tags.%:                                    <computed>
      tenancy:                                   <computed>
      volume_tags.%:                             <computed>
      vpc_security_group_ids.#:                  <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-privateagent-instances.module.dcos-private-agent-instances.null_resource.instance-prereq[0]
      id:                                        <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-privateagent-instances.module.dcos-private-agent-instances.null_resource.instance-prereq[1]
      id:                                        <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-publicagent-instances.module.dcos-public-agent-instances.aws_instance.instance
      id:                                        <computed>
      ami:                                       "ami-00435c26c02508dc7"
      arn:                                       <computed>
      associate_public_ip_address:               "true"
      availability_zone:                         <computed>
      cpu_core_count:                            <computed>
      cpu_threads_per_core:                      <computed>
      ebs_block_device.#:                        <computed>
      ephemeral_block_device.#:                  <computed>
      get_password_data:                         "false"
      iam_instance_profile:                      "${var.iam_instance_profile}"
      instance_state:                            <computed>
      instance_type:                             "m4.xlarge"
      ipv6_address_count:                        <computed>
      ipv6_addresses.#:                          <computed>
      key_name:                                  "${var.key_name}"
      network_interface.#:                       <computed>
      network_interface_id:                      <computed>
      password_data:                             <computed>
      placement_group:                           <computed>
      primary_network_interface_id:              <computed>
      private_dns:                               <computed>
      private_ip:                                <computed>
      public_dns:                                <computed>
      public_ip:                                 <computed>
      root_block_device.#:                       "1"
      root_block_device.0.delete_on_termination: "true"
      root_block_device.0.volume_id:             <computed>
      root_block_device.0.volume_size:           "120"
      root_block_device.0.volume_type:           "gp2"
      security_groups.#:                         <computed>
      source_dest_check:                         "true"
      subnet_id:                                 "${element(var.subnet_ids, count.index % length(var.subnet_ids))}"
      tags.%:                                    <computed>
      tenancy:                                   <computed>
      volume_tags.%:                             <computed>
      vpc_security_group_ids.#:                  <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-publicagent-instances.module.dcos-public-agent-instances.null_resource.instance-prereq
      id:                                        <computed>

 <= module.dcos.module.dcos-install.module.dcos-bootstrap-install.module.dcos-bootstrap.data.template_file.script
      id:                                        <computed>
      rendered:                                  <computed>
      template:                                  "#!/bin/sh\n\nmkdir -p genconf\ncat << 'EOF' | sed '/^$/d' | tee genconf/config.yaml\n---\n# Auto-generated by Terraform Templates\n# Created on date: ${timestamp()}\n${bootstrap_private_ip == \"\" ? \"\" : \"bootstrap_url: http://${bootstrap_private_ip}:${dcos_bootstrap_port}\"}\n${dcos_cluster_name == \"\" ? \"\" : \"cluster_name: ${dcos_cluster_name}\"}\n${dcos_security== \"\" ? \"\" : \"security: ${dcos_security}\"}\n${dcos_resolvers== \"\" ? \"\" : \"resolvers: ${dcos_resolvers}\"}\n${dcos_oauth_enabled== \"\" ? \"\" : \"oauth_enabled: ${dcos_oauth_enabled}\"}\n${dcos_master_discovery== \"\" ? \"\" : \"master_discovery: ${dcos_master_discovery}\"}\n${dcos_aws_template_storage_bucket== \"\" ? \"\" : \"aws_template_storage_bucket: ${dcos_aws_template_storage_bucket}\"}\n${dcos_aws_template_storage_bucket_path== \"\" ? \"\" : \"aws_template_storage_bucket_path: ${dcos_aws_template_storage_bucket_path}\"}\n${dcos_aws_template_storage_region_name== \"\" ? \"\" : \"aws_template_storage_region_name: ${dcos_aws_template_storage_region_name}\"}\n${dcos_aws_template_upload== \"\" ? \"\" : \"aws_template_upload: ${dcos_aws_template_upload}\"}\n${dcos_aws_template_storage_access_key_id== \"\" ? \"\" : \"aws_template_storage_access_key_id: ${dcos_aws_template_storage_access_key_id}\"}\n${dcos_aws_template_storage_secret_access_key== \"\" ? \"\" : \"aws_template_storage_secret_access_key: ${dcos_aws_template_storage_secret_access_key}\"}\n${dcos_adminrouter_tls_1_0_enabled== \"\" ? \"\" : \"adminrouter_tls_1_0_enabled: ${dcos_adminrouter_tls_1_0_enabled}\"}\n${dcos_adminrouter_tls_1_1_enabled== \"\" ? \"\" : \"adminrouter_tls_1_1_enabled: ${dcos_adminrouter_tls_1_1_enabled}\"}\n${dcos_adminrouter_tls_1_2_enabled== \"\" ? \"\" : \"adminrouter_tls_1_2_enabled: ${dcos_adminrouter_tls_1_2_enabled}\"}\n${dcos_adminrouter_tls_cipher_suite== \"\" ? \"\" : \"adminrouter_tls_cipher_suite: ${dcos_adminrouter_tls_cipher_suite}\"}\n${dcos_ca_certificate_path== \"\" ? \"\" : \"ca_certificate_path: ${dcos_ca_certificate_path}\"}\n${dcos_ca_certificate_key_path== \"\" ? \"\" : \"ca_certificate_key_path: ${dcos_ca_certificate_key_path}\"}\n${dcos_ca_certificate_chain_path== \"\" ? \"\" : \"ca_certificate_chain_path: ${dcos_ca_certificate_chain_path}\"}\n${dcos_exhibitor_storage_backend== \"\" ? \"\" : \"exhibitor_storage_backend: ${dcos_exhibitor_storage_backend}\"}\n${dcos_exhibitor_storage_backend == \"zookeeper\" ? dcos_exhibitor_zk_hosts== \"\" ? \"\" : \"exhibitor_zk_hosts: ${dcos_exhibitor_zk_hosts}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"zookeeper\" ? dcos_exhibitor_zk_path== \"\" ? \"\" : \"exhibitor_zk_path: ${dcos_exhibitor_zk_path}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"aws_s3\" ? dcos_aws_access_key_id== \"\" ? \"\" : \"aws_access_key_id: ${dcos_aws_access_key_id}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"aws_s3\" ? dcos_aws_region== \"\" ? \"\" : \"aws_region: ${dcos_aws_region}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"aws_s3\" ? dcos_aws_secret_access_key== \"\" ? \"\" : \"aws_secret_access_key: ${dcos_aws_secret_access_key}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"aws_s3\" ? dcos_exhibitor_explicit_keys== \"\" ? \"\" : \"exhibitor_explicit_keys: ${dcos_exhibitor_explicit_keys}\" :\"\"}\n${dcos_exhibitor_storage_backend == \"aws_s3\" ? dcos_s3_bucket== \"\" ? \"\" : \"s3_bucket: ${dcos_s3_bucket}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"aws_s3\" ? dcos_s3_prefix== \"\" ? \"\" : \"s3_prefix: ${dcos_s3_prefix}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"azure\" ? dcos_exhibitor_azure_account_name== \"\" ? \"\" : \"exhibitor_azure_account_name: ${dcos_exhibitor_azure_account_name}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"azure\" ? dcos_exhibitor_azure_account_key== \"\" ? \"\" : \"exhibitor_azure_account_key: ${dcos_exhibitor_azure_account_key}\" : \"\"}\n${dcos_exhibitor_storage_backend == \"azure\" ? dcos_exhibitor_azure_prefix== \"\" ? \"\" : \"exhibitor_azure_prefix: ${dcos_exhibitor_azure_prefix}\" : \"\"}\n${dcos_master_external_loadbalancer == \"\" ? \"\" : \"master_external_loadbalancer: ${dcos_master_external_loadbalancer}\"}\n${dcos_master_discovery == \"master_http_loadbalancer\" ? dcos_num_masters == \"\" ? \"\" : \"num_masters: ${dcos_num_masters}\" : \"\"}\n${dcos_master_discovery == \"master_http_loadbalancer\" ? dcos_exhibitor_address== \"\" ? \"\" : \"exhibitor_address: ${dcos_exhibitor_address}\" : \"\"}\n${dcos_master_discovery == \"static\" ? dcos_master_list== \"\" ? \"\" : \"master_list: ${dcos_master_list}\" : \"\"}\n${dcos_customer_key== \"\" ? \"\" : \"customer_key: ${dcos_customer_key}\"}\n${dcos_custom_checks== \"\" ? \"\" : \"custom_checks: ${dcos_custom_checks}\"}\n${dcos_dns_bind_ip_blacklist== \"\" ? \"\" : \"dns_bind_ip_blacklist: ${dcos_dns_bind_ip_blacklist}\"}\n${dcos_l4lb_enable_ipv6== \"\" ? \"\" : \"dcos_l4lb_enable_ipv6: ${dcos_l4lb_enable_ipv6}\"}\n${dcos_ucr_default_bridge_subnet== \"\" ? \"\" : \"dcos_ucr_default_bridge_subnet: ${dcos_ucr_default_bridge_subnet}\"}\n${dcos_enable_gpu_isolation== \"\" ? \"\" : \"enable_gpu_isolation: ${dcos_enable_gpu_isolation}\"}\n${dcos_gpus_are_scarce== \"\" ? \"\" : \"gpus_are_scarce: ${dcos_gpus_are_scarce}\"}\n${dcos_rexray_config_method== \"\" ? \"\" : \"rexray_config_method: ${dcos_rexray_config_method}\"}\n${dcos_rexray_config_filename== \"\" ? \"\" : \"rexray_config_filename: ${dcos_rexray_config_filename}\"}\n${dcos_auth_cookie_secure_flag== \"\" ? \"\" : \"auth_cookie_secure_flag: ${dcos_auth_cookie_secure_flag}\"}\n${dcos_bouncer_expiration_auth_token_days== \"\" ? \"\" : \"bouncer_expiration_auth_token_days: ${dcos_bouncer_expiration_auth_token_days}\"}\n${dcos_superuser_password_hash== \"\" ? \"\" : \"superuser_password_hash: ${dcos_superuser_password_hash}\"}\n${dcos_superuser_username== \"\" ? \"\" : \"superuser_username: ${dcos_superuser_username}\"}\n${dcos_telemetry_enabled== \"\" ? \"\" : \"telemetry_enabled: ${dcos_telemetry_enabled}\"}\n${dcos_zk_super_credentials== \"\" ? \"\" : \"zk_super_credentials: ${dcos_zk_super_credentials}\"}\n${dcos_zk_master_credentials== \"\" ? \"\" : \"zk_master_credentials: ${dcos_zk_master_credentials}\"}\n${dcos_zk_agent_credentials== \"\" ? \"\" : \"zk_agent_credentials: ${dcos_zk_agent_credentials}\"}\n${dcos_overlay_enable== \"\" ? \"\" : \"dcos_overlay_enable: ${dcos_overlay_enable}\"}\n${dcos_overlay_config_attempts== \"\" ? \"\" : \"dcos_overlay_config_attempts: ${dcos_overlay_config_attempts}\"}\n${dcos_overlay_mtu== \"\" ? \"\" : \"dcos_overlay_mtu: ${dcos_overlay_mtu}\"}\n${dcos_overlay_network== \"\" ? \"\" : \"dcos_overlay_network: ${dcos_overlay_network}\"}\n${dcos_dns_search== \"\" ? \"\" : \"dns_search: ${dcos_dns_search}\"}\n${dcos_dns_forward_zones== \"\" ? \"\" : \"dns_forward_zones: ${dcos_dns_forward_zones}\"}\n${dcos_master_dns_bindall== \"\" ? \"\" : \"master_dns_bindall: ${dcos_master_dns_bindall}\"}\n${dcos_mesos_max_completed_tasks_per_framework== \"\" ? \"\" : \"mesos_max_completed_tasks_per_framework: ${dcos_mesos_max_completed_tasks_per_framework}\"}\n${dcos_mesos_container_log_sink== \"\" ? \"\" : \"mesos_container_log_sink: ${dcos_mesos_container_log_sink}\"}\n${dcos_mesos_dns_set_truncate_bit== \"\" ? \"\" : \"mesos_dns_set_truncate_bit: ${dcos_mesos_dns_set_truncate_bit}\"}\n${dcos_master_dns_bindall== \"\" ? \"\" : \"master_dns_bindall: ${dcos_master_dns_bindall}\"}\n${dcos_license_key_contents== \"\" ? \"\" : \"license_key_contents: ${dcos_license_key_contents}\"}\n${dcos_fault_domain_detect_contents== \"\" ? \"\" : \"fault_domain_detect_contents: ${dcos_fault_domain_detect_contents}\"}\n${dcos_fault_domain_enabled== \"\" ? \"\" : \"fault_domain_enabled: ${dcos_fault_domain_enabled}\"}\n${dcos_use_proxy== \"\" ? \"\" : \"use_proxy: ${dcos_use_proxy}\"}\n${dcos_http_proxy== \"\" ? \"\" : \"http_proxy: ${dcos_http_proxy}\"}\n${dcos_https_proxy== \"\" ? \"\" : \"https_proxy: ${dcos_https_proxy}\"}\n${dcos_no_proxy== \"\" ? \"\" : \"no_proxy: ${dcos_no_proxy}\"}\n${dcos_check_time== \"\" ? \"\" : \"check_time: ${dcos_check_time}\"}\n${dcos_ip_detect_contents== \"\" ? \"\" : \"ip_detect_contents: ${dcos_ip_detect_contents}\"}\n${dcos_ip_detect_public_contents== \"\" ? \"\" : \"ip_detect_public_contents: ${dcos_ip_detect_public_contents}\"}\n${dcos_ip_detect_public_filename== \"\" ? \"\" : \"ip_detect_public_filename: ${dcos_ip_detect_public_filename}\"}\n${dcos_docker_remove_delay== \"\" ? \"\" : \"docker_remove_delay: ${dcos_docker_remove_delay}\"}\n${dcos_enable_docker_gc== \"\" ? \"\" : \"enable_docker_gc: ${dcos_enable_docker_gc}\"}\n${dcos_audit_logging== \"\" ? \"\" : \"audit_logging: ${dcos_audit_logging}\"}\n${dcos_gc_delay== \"\" ? \"\" : \"gc_delay: ${dcos_gc_delay}\"}\n${dcos_log_directory== \"\" ? \"\" : \"log_directory: ${dcos_log_directory}\"}\n${dcos_process_timeout== \"\" ? \"\" : \"process_timeout: ${dcos_process_timeout}\"}\n${dcos_cluster_docker_credentials== \"\" ? \"\" : \"cluster_docker_credentials: ${dcos_cluster_docker_credentials}\"}\n${dcos_cluster_docker_credentials_dcos_owned== \"\" ? \"\" : \"cluster_docker_credentials_dcos_owned: ${dcos_cluster_docker_credentials_dcos_owned}\"}\n${dcos_cluster_docker_credentials_write_to_etc== \"\" ? \"\" : \"cluster_docker_credentials_write_to_etc: ${dcos_cluster_docker_credentials_write_to_etc}\"}\n${dcos_cluster_docker_credentials_enabled== \"\" ? \"\" : \"cluster_docker_credentials_enabled: ${dcos_cluster_docker_credentials_enabled}\"}\n${dcos_cluster_docker_registry_url == \"\" ? \"\" : \"cluster_docker_registry_url: ${dcos_cluster_docker_registry_url}\"}\n${dcos_cluster_docker_registry_enabled == \"\" ? \"\" : \"cluster_docker_registry_enabled: ${dcos_cluster_docker_registry_enabled}\"}\n${dcos_rexray_config == \"\" ? \"\" : \"rexray_config: ${dcos_rexray_config}\"}\n${dcos_staged_package_storage_uri == \"\" ? \"\" : dcos_package_storage_uri == \"\" ? \"\" : \"cosmos_config:\"}\n${dcos_staged_package_storage_uri == \"\" ? \"\" : \"  staged_package_storage_uri: ${dcos_staged_package_storage_uri}\"}\n${dcos_package_storage_uri == \"\" ? \"\" : \"  package_storage_uri: ${dcos_package_storage_uri}\"}\n${dcos_config== \"\" ? \"\" : \"${dcos_config}\"}\nEOF\ncurl -o dcos_generate_config.${dcos_version}.sh ${dcos_download_path}\ncp /tmp/ip-detect genconf/. &> /dev/null; if [[ $? -ne 0 ]]; then echo \"skipping absent /tmp/ip-detect file\"; else echo \"copied file /tmp/ip-detect to ~/genconf\"; fi\ncp /tmp/ip-detect-public genconf/. &> /dev/null; if [[ $? -ne 0 ]]; then echo \"skipping absent /tmp/ip-detect-public file\"; else echo \"copied file /tmp/ip-detect-public to ~/genconf\"; fi\ncp /tmp/fault-domain-detect genconf/. &> /dev/null; if [[ $? -ne 0 ]]; then echo \"skipping absent /tmp/fault-domain-detect file\"; else echo \"copied file /tmp/fault-domain-detect to ~/genconf\"; fi\ncp /tmp/license.txt genconf/. &> /dev/null; if [[ $? -ne 0 ]]; then echo \"skipping absent /tmp/license.txt file\"; else echo \"copied file /tmp/license.txt to ~/genconf\"; fi\nbash dcos_generate_config.${dcos_version}.sh || exit 1\ndocker rm -f $(docker ps -a -q -f ancestor=nginx:1.15.0) &> /dev/null; if [[ $? -eq 0 ]]; then echo \"reloaded nginx...\"; fi\ndocker run -d -p ${dcos_bootstrap_port}:80 -v $PWD/genconf/serve:/usr/share/nginx/html:ro nginx:1.15.0\n"
      vars.%:                                    <computed>

 <= module.dcos.module.dcos-install.module.dcos-masters-install.module.dcos-mesos-master.data.template_file.script
      id:                                        <computed>
      rendered:                                  <computed>
      template:                                  "#!/bin/sh\n\n# Install Master Node\nmkdir /tmp/dcos && cd /tmp/dcos\n/usr/bin/curl -O ${bootstrap_private_ip}:${dcos_bootstrap_port}/dcos_install.sh\nbash dcos_install.sh master\n# Master Node End\n"
      vars.%:                                    <computed>

 <= module.dcos.module.dcos-install.module.dcos-private-agents-install.module.dcos-mesos-private-agent.data.template_file.script
      id:                                        <computed>
      rendered:                                  <computed>
      template:                                  "#!/bin/sh\n\n# Install Agent Node\nmkdir /tmp/dcos && cd /tmp/dcos\n/usr/bin/curl -O ${bootstrap_private_ip}:${dcos_bootstrap_port}/dcos_install.sh\nbash dcos_install.sh slave\n# Agent Node End\n\n"
      vars.%:                                    <computed>

 <= module.dcos.module.dcos-install.module.dcos-public-agents-install.module.dcos-mesos-public-agent.data.template_file.script
      id:                                        <computed>
      rendered:                                  <computed>
      template:                                  "#!/bin/sh\n\n# Install Agent Node\nmkdir /tmp/dcos && cd /tmp/dcos\n/usr/bin/curl -O ${bootstrap_private_ip}:${dcos_bootstrap_port}/dcos_install.sh\nbash dcos_install.sh slave_public\n# Agent Node End\n"
      vars.%:                                    <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-elb.module.dcos-elb-masters-internal.module.masters-internal.aws_elb.loadbalancer
      id:                                        <computed>
      arn:                                       <computed>
      availability_zones.#:                      <computed>
      connection_draining:                       "false"
      connection_draining_timeout:               "300"
      cross_zone_load_balancing:                 "true"
      dns_name:                                  <computed>
      health_check.#:                            "1"
      health_check.0.healthy_threshold:          "2"
      health_check.0.interval:                   "30"
      health_check.0.target:                     "TCP:5050"
      health_check.0.timeout:                    "5"
      health_check.0.unhealthy_threshold:        "2"
      idle_timeout:                              "60"
      instances.#:                               <computed>
      internal:                                  "true"
      listener.#:                                "6"
      listener.1092403652.instance_port:         "8080"
      listener.1092403652.instance_protocol:     "http"
      listener.1092403652.lb_port:               "8080"
      listener.1092403652.lb_protocol:           "http"
      listener.1092403652.ssl_certificate_id:    ""
      listener.2024497952.instance_port:         "2181"
      listener.2024497952.instance_protocol:     "tcp"
      listener.2024497952.lb_port:               "2181"
      listener.2024497952.lb_protocol:           "tcp"
      listener.2024497952.ssl_certificate_id:    ""
      listener.2974294026.instance_port:         "80"
      listener.2974294026.instance_protocol:     "tcp"
      listener.2974294026.lb_port:               "80"
      listener.2974294026.lb_protocol:           "tcp"
      listener.2974294026.ssl_certificate_id:    ""
      listener.3829233144.instance_port:         "5050"
      listener.3829233144.instance_protocol:     "http"
      listener.3829233144.lb_port:               "5050"
      listener.3829233144.lb_protocol:           "http"
      listener.3829233144.ssl_certificate_id:    ""
      listener.3896584131.instance_port:         "8181"
      listener.3896584131.instance_protocol:     "http"
      listener.3896584131.lb_port:               "8181"
      listener.3896584131.lb_protocol:           "http"
      listener.3896584131.ssl_certificate_id:    ""
      listener.610193557.instance_port:          "443"
      listener.610193557.instance_protocol:      "tcp"
      listener.610193557.lb_port:                "443"
      listener.610193557.lb_protocol:            "tcp"
      listener.610193557.ssl_certificate_id:     ""
      name:                                      "${substr(local.elb_name,0, length(local.elb_name) >= 32 ? 32 : length(local.elb_name) )}"
      security_groups.#:                         <computed>
      source_security_group:                     <computed>
      source_security_group_id:                  <computed>
      subnets.#:                                 <computed>
      tags.%:                                    <computed>
      zone_id:                                   <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-elb.module.dcos-elb-masters.module.masters.aws_elb.loadbalancer
      id:                                        <computed>
      arn:                                       <computed>
      availability_zones.#:                      <computed>
      connection_draining:                       "false"
      connection_draining_timeout:               "300"
      cross_zone_load_balancing:                 "true"
      dns_name:                                  <computed>
      health_check.#:                            "1"
      health_check.0.healthy_threshold:          "2"
      health_check.0.interval:                   "30"
      health_check.0.target:                     "TCP:5050"
      health_check.0.timeout:                    "5"
      health_check.0.unhealthy_threshold:        "2"
      idle_timeout:                              "60"
      instances.#:                               <computed>
      internal:                                  "false"
      listener.#:                                "2"
      listener.3057123346.instance_port:         "80"
      listener.3057123346.instance_protocol:     "http"
      listener.3057123346.lb_port:               "80"
      listener.3057123346.lb_protocol:           "http"
      listener.3057123346.ssl_certificate_id:    ""
      listener.610193557.instance_port:          "443"
      listener.610193557.instance_protocol:      "tcp"
      listener.610193557.lb_port:                "443"
      listener.610193557.lb_protocol:            "tcp"
      listener.610193557.ssl_certificate_id:     ""
      name:                                      "${substr(local.elb_name,0, length(local.elb_name) >= 32 ? 32 : length(local.elb_name) )}"
      security_groups.#:                         <computed>
      source_security_group:                     <computed>
      source_security_group_id:                  <computed>
      subnets.#:                                 <computed>
      tags.%:                                    <computed>
      zone_id:                                   <computed>

  + module.dcos.module.dcos-infrastructure.module.dcos-elb.module.dcos-elb-public-agents.module.public-agents.aws_elb.loadbalancer
      id:                                        <computed>
      arn:                                       <computed>
      availability_zones.#:                      <computed>
      connection_draining:                       "false"
      connection_draining_timeout:               "300"
      cross_zone_load_balancing:                 "true"
      dns_name:                                  <computed>
      health_check.#:                            "1"
      health_check.0.healthy_threshold:          "2"
      health_check.0.interval:                   "5"
      health_check.0.target:                     "HTTP:9090/_haproxy_health_check"
      health_check.0.timeout:                    "2"
      health_check.0.unhealthy_threshold:        "2"
      idle_timeout:                              "60"
      instances.#:                               <computed>
      internal:                                  "false"
      listener.#:                                "2"
      listener.3057123346.instance_port:         "80"
      listener.3057123346.instance_protocol:     "http"
      listener.3057123346.lb_port:               "80"
      listener.3057123346.lb_protocol:           "http"
      listener.3057123346.ssl_certificate_id:    ""
      listener.610193557.instance_port:          "443"
      listener.610193557.instance_protocol:      "tcp"
      listener.610193557.lb_port:                "443"
      listener.610193557.lb_protocol:            "tcp"
      listener.610193557.ssl_certificate_id:     ""
      name:                                      "${substr(local.elb_name,0, length(local.elb_name) >= 32 ? 32 : length(local.elb_name) )}"
      security_groups.#:                         <computed>
      source_security_group:                     <computed>
      source_security_group_id:                  <computed>
      subnets.#:                                 <computed>
      tags.%:                                    <computed>
      zone_id:                                   <computed>


Plan: 38 to add, 0 to change, 0 to destroy.

------------------------------------------------------------------------

This plan was saved to: plan.out

To perform exactly these actions, run the following command to apply:
    terraform apply "plan.out"